@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._
@import scalafix.{Versions => V}
@import scalafix.cli.Cli

@sect{Installation}

  @p
    Scalafix can used either as a tool or a library.
    Integrations are currently limited to the command-line, but it may be possible
    to add IDE integrations in the future.

  @sect{sbt-scalafix}
    The sbt-plugin is the recommended integration for semantic rewrites.

    @hl.scala
      addSbtPlugin("ch.epfl.scala" % "sbt-scalafix" % "@V.stable")

    @ul
      @li
        @code{sbt scalafix} runs @sect.ref{Rewrites}.
      @li
        uses scalafix-nsc, a compiler plugin, to run rewrites during compilation.
        The compiler plugin is disabled by default, @code{scalafixEnabled in ThisBuild := true}
        enables the compiler plugin for your entire build.
      @li
        Configuration is read from @code{.scalafix.conf}.
        See @sect.ref{Configuration} for more details on how to customize which rewrites to run.
      @li
        Scalafix supports 2.11 and 2.12.
        Projects with @code{scalaVersion} 2.10 are ignored by scalafix.

  @sect{scalafix-core}
    Scalafix can be used as a library to run custom rewrites.
    @hl.scala
      libraryDependencies += "ch.epfl.scala" % "scalafix-core" % "@V.stable" cross CrossVersion.full


    By using scalafix as a library, you have full control of how/when/where
    rewrites are written.

    @p
      When writing custom rewrites, you should decide what API you need.
      There currently available APIs are:

      @ul
        @li
          Syntactic api. This is the easiest option but also the least powerful one.
          It does not provide access to compilation information such as symbols/types.
          Just create a @code{scalafix.rewrite.Rewrite[Any]} and go!
        @li
          @code{scala.meta.Mirror}, aka.
          @lnk("scalameta semantic API",
               "https://github.com/scalameta/scalameta/blob/master/changelog/1.6.0.md#semantic-api").
          See @lnk("sbt-semantic-example", "https://github.com/scalameta/sbt-semantic-example")
          on how to construct a @code{scala.meta.Mirror}.
          Once you have a @code{Mirror} instance, you can create a
          @code{scalafix.rewrite.RewriteCtx[Mirror]} for each @code{scala.meta.Source} in
          @code{scala.meta.Mirror.sources}.
    @p
      Scalafix as a library is still under heavy development.
      Feedback is very welcome.
      Be prepared for breaking changes.

  @sect{scalafix-cli}
    The recommended way to install the scalafix command-line interface is with
    @lnk("coursier", "https://github.com/coursier/coursier#command-line").

    @hl.scala
      // coursier
      coursier bootstrap ch.epfl.scala:scalafix-cli_@(V.scalaVersion):@(V.stable) -f --main scalafix.cli.Cli -o scalafix
      ./scalafix --help

      // homebrew
      brew install --HEAD olafurpg/scalafmt/scalafix
      scalafix --help

      // wget
      wget -O scalafix https://github.com/scalacenter/scalafix/blob/master/scalafix?raw=true
      ./scalafix --help

    @p
      The @code{cli} module depends on the @code{scalahost-nsc} compiler plugin
      fatjar, making it unnecessary to pass in the @code{--scalahost-nsc-plugin-path}
      flag.

    @p
      Once the scalafix cli is installed, consult the help page for further usage
      instructions

    @hl.scala(Cli.helpMessage)

  @sect{cbt}
    There is an experimental
    @lnk("cbt plugin", "https://github.com/cvogt/cbt/blob/fb0c68ffab35db304771e177ce93f80a680fabcc/plugins/scalafix/Scalafix.scala")
    for scalafix.

  @sect{Pre-release}
     Our CI infrastructure publishes a pre-release version on every merge into master.
     These pre-releases make it possible to try out new scalafix features that have
     not yet been officially released.

     @hl.scala
       // sbt
       @bintrayRepo // necessary to resolve pre-release
       libraryDependencies += "ch.epfl.scala" % "scalafix-core" % "@V.nightly" cross CrossVersion.full
       libraryDependencies += "ch.epfl.scala" % "scalafix-cli" % "@V.nightly" cross CrossVersion.full
       libraryDependencies += "ch.epfl.scala" % "scalafix-testkit" % "@V.nightly" % Test cross CrossVersion.full
       // cli
       coursier bootstrap ch.epfl.scala:scalafix-cli_@(V.scalaVersion):@(V.nightly) -r bintray:scalameta/maven -f --main scalafix.cli.Cli -o scalafix

